#include <iostream>
using namespace std;
#include <vector>
#include <queue>

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

bool bfs(const vector<vector<int>> &adj, int starting_node, vector<bool> &visited) {
    if (starting_node < 0 || starting_node >= adj.size()) {
        return;
    }

    queue<pair<int,int>> bfs_queue;
    bfs_queue.push({starting_node,-1});
    visited[starting_node] = true;

    while (!bfs_queue.empty()) {
        auto node = bfs_queue.front();
        int value=node.first;
        int parent=node.second;
        bfs_queue.pop();

        for (int neighbor : adj[value]) {
            if (!visited[neighbor]) {
                bfs_queue.push({neighbor,value});
                visited[neighbor] = true; 
            }
            else{
                if(neighbor!=parent){
                    return true;
                }
            }

        }
    }
    return false;
}