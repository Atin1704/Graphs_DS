
#include <iostream>
#include <vector>
#include <queue>
using namespace std;




class Solution {
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        // If the starting pixel already has the target color, no need to do anything
        if(image[sr][sc] == color) {
            return image;
        }

        int original_color = image[sr][sc];  // Store the original color of the starting pixel
        int m = image.size();
        int n = image[0].size();

        // Queue to perform BFS
        queue<pair<int,int>> q;
        q.push({sr, sc});

        // Directions: up, down, right, left
        vector<pair<int,int>> directions = {{-1,0},{1,0},{0,1},{0,-1}};

        // Color the starting pixel
        image[sr][sc] = color;

        // Start BFS
        while(!q.empty()) {
            auto current = q.front();
            q.pop();

            int row = current.first;
            int col = current.second;

            // Check all 4 neighboring pixels
            for(auto dir : directions) {
                int new_row = row + dir.first;
                int new_col = col + dir.second;

                // Make sure the new pixel is within the image boundaries
                if(new_row >= 0 && new_row < m && new_col >= 0 && new_col < n) {
                    // Only process the pixel if it has the original color
                    if(image[new_row][new_col] == original_color) {
                        // Change its color and add it to the queue for further processing
                        image[new_row][new_col] = color;
                        q.push({new_row, new_col});
                    }
                }
            }
        }

        // Return the modified image
        return image;
    }
};


