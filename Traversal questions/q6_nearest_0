


#include <iostream>
#include <vector>
#include <queue>
using namespace std;






class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        if (mat.empty()) return {};

        int rows = mat.size();
        int cols = mat[0].size();           // <- need size()
        
        queue<pair<pair<int,int>,int>> q;
        vector<pair<int,int>> drs = {{0,-1},{0,1},{1,0},{-1,0}};

        // Push all 0-cells as multi-source BFS seeds
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                if (mat[i][j] == 0) {
                    q.push({{i, j}, 0});
                }
            }
        }

        // Standard multi-source BFS
        while (!q.empty()) {
            auto it = q.front(); q.pop();
            int x    = it.first.first;
            int y    = it.first.second;
            int dist = it.second;

            for (auto d : drs) {
                int xi = x + d.first;
                int yi = y + d.second;
                if (xi >= 0 && xi < rows && yi >= 0 && yi < cols && mat[xi][yi] == 1) {
                    mat[xi][yi] = -(dist + 1);           // mark visited with negative distance
                    q.push({{xi, yi}, dist + 1});
                }
            }
        }

        // Convert negatives back to positive distances
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                if (mat[i][j] < 0) mat[i][j] = -mat[i][j];
            }
        }

        return mat;
    }
};


//link-https://leetcode.com/problems/01-matrix/