#include <iostream>
#include <vector>
#include <queue>
using namespace std;

class Solution {
public:


    void bfs( vector<vector<char>> &grid,int row,int column,int m,int n){
        grid[row][column]='0';
        queue<pair<int,int>> q;
        q.push({row,column});
        vector<pair<int,int>> dirs = {{0,1}, {1,0}, {0,-1}, {-1,0}}; // right, down, left, up

        while(!q.empty()){
            auto it=q.front();
            q.pop();
            for(auto p:dirs){
                int xi=p.first+it.first;
                int yi=p.second+it.second;
                if(xi >= 0 && xi < m && yi >= 0 && yi < n && grid[xi][yi] == '1') {
                            q.push({xi, yi});
                            grid[xi][yi] = '0';
                        }
            }
            
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        int count=0;
        int m=grid.size();
        int n=grid[0].size();
       
        // 1. Number the '1' cells
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]=='1'){
                    bfs(grid,i,j,m,n);
                    count++;
                    
            }
        }}
        return count;
        

        
        
    }
};


//link-https://leetcode.com/problems/number-of-islands/

//same as number of provinces
//just here we are delaing iwth a matrix
//to reduce space complexity to zero
//we used in place marking ,marking all 1's to 0's when they had been visited
//this prevented the visited array from being used
//tho it could have been used





